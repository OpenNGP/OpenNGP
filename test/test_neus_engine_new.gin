Config.data_dir = '../lego/'
Config.exp_dir = '../OpenNGP_Exp/debug_neus'
Config.dataset_loader = 'neus'
Config.torch_dataset = False
Config.batching = 'single_image'
Config.batch_size = 100
Config.near = 0.01
Config.far = 2
Config.white_bkgd = False
Config.max_steps = 120000
Config.save_every = 10000
Config.lazy_ray = True
Config.precrop_iters = 500
Config.refine_exposure = False
# Config.color_mode = 'linear'
Config.criterion = {
    'name': 'CompositeLoss',
    'loss_configs': [
        {
            'name': 'PixelLoss',
            'diff_type': 'l1', 
            'depth_diff_type': 'huber',
            'bound': 1.5,
            'epsilon': 0.075,  # 3*std
            'decay': 500
        },
        {
            'name': 'EikonalLoss',
            'igr_weight': 0.1
        }
    ]

}
Config.primitives = [
    {
        'name': 'NeuS',
        'arch': {'name': 'NeuS'}
    },
    {
        'name': 'nerf-outside',
        'arch': {'name': 'BaseNeRF'}
    }
]
Config.pipelines = [
    {
        'name': 'render inside',
        'primitive': 'NeuS',
        'renderpasses': [
            (
                'uniform inside',
                ('uniform_sampler', {
                    'N_samples': 64,
                    'lindisp': False,
                    'perturb': True
                }),
                ('integrate_neus_upsample_weight', {'idx':0})
            ),
            (   'importance inside 0',
                ('neus_important_sampler',{'N_importance': 16}),
                ('integrate_neus_upsample_weight', {'idx':1})
            ),
            (   'importance inside 1',
                ('neus_important_sampler',{'N_importance': 16}),
                ('integrate_neus_upsample_weight', {'idx':2})
            ),
            (   'importance inside 2',
                ('neus_important_sampler',{'N_importance': 16}),
                ('integrate_neus_upsample_weight', {'idx':3})
            ),
            (   'importance inside 3',
                ('neus_important_sampler',{'N_importance': 16}),
                ('integrate_neus', {}))
        ]
    },
    {
        'name': 'render outside',
        'primitive': 'nerf-outside',
        'renderpasses': [
            (
                'fine',
                ('neus_outside_sampler', {
                    'N_samples_outside': 32,
                    'N_samples': 64,
                    'lindisp': False,
                    'perturb': True,
                    'use_norm_dir': False
                }),
                ('volume_integrator', {})
            )
        ]
    }
]